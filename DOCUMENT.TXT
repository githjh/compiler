Student ID: 20120962
Name      : Jaehyeong Ha

1. How to test this complier

1)build

	type ant

2)run
	java -classpath classes/ Absyn.Parser filename.c
	
	symentic analisis will be printed (Warning of Error Messege).

	AST = tree.txt
	symbol table = table.txt
	code = code.T 

3) clean
	type ant clean

4) sample T-machine code for C test programs with floating point expessions
	
	It can be checked by running example.c

	It is part of mul function

	LAB mul 
	...
	FMUL MEM(SP@(-2))@ MEM(SP@(-1))@ VR(6)
	SUB SP@ 2 SP
	F2I VR(6)@ VR(7)
	MOVE VR(7)@ VR(0)
	...

	The return type of function mul is integer.
	After floating point multiflication, it will be converted to integer.

5) sample run (magic.c which is a homework2 code)

	It will be print magic square of size 3.

	All of overheads are set as 1.

	# of Instruction (Program Size) :: 313
	# of Instruction Execution  :      1985
	 
	 Sum of All Memory Segment ....
        Memory Usage  :       101
       Read Overhead  :      2532
      Write Overhead  :      1602

ant
java -classpath classes Parse simple_if.c

2. Design acivation record template

- return address will be saved on MEM(FP@(-2))
- Parameters and local variables can be accessed by using FP. 
- Before call a function, we have to save parameter values, return address and the old FP value. Parameters will be saved on STACK(=MEM) as order of function arguments. After that, the return address, and old FP will be saved. The stucture of Main memory will be the follwing:

--------------   <- New FP, SP
Old FP
-------------- -1
Return Address
-------------- -2
Parameter N
-------------- -3
....
--------------
Parameter 2
--------------
Parameter 1
....

 For example, there is a simple add function which returns sumation of two input parameters
  ----------------------
  int ADD(int a, int b){
  	return a+b;
  }
  ----------------------
  The value of parameter a is saved on MEM(FP@(-4)) and b is saved on MEM(FP@(-3)).

- return value of function will be saved on VR(0).
- Saving local variables is simillar to saving parameters. They are saved on STACK by declaration order.

--------------  <- SP
local var N
-------------- +3
....
-------------- +2
local var 2
-------------- +1
local var 1
--------------   <- FP
Old FP
-------------- -1
Return Address
-------------- -2
....

 If you want to access local variable 2, then it can be done by accessing MEM(FP@(1)).

- Global values are saved on the first of memory, and the order
- I used a temporary variable when I caculate expression. It is saved on stack.



