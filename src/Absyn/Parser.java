
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 30 18:25:55 KST 2016
//----------------------------------------------------

package Absyn;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 30 18:25:55 KST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\003\003" +
    "\000\002\003\004\000\002\004\003\000\002\004\004\000" +
    "\002\005\005\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\006\000\002\010\007\000\002\010" +
    "\010\000\002\011\004\000\002\011\006\000\002\012\003" +
    "\000\002\012\003\000\002\013\005\000\002\013\006\000" +
    "\002\014\004\000\002\014\002\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\004\000\002\017\005\000" +
    "\002\017\010\000\002\020\004\000\002\021\006\000\002" +
    "\021\005\000\002\022\004\000\002\022\005\000\002\025" +
    "\007\000\002\025\011\000\002\023\007\000\002\023\011" +
    "\000\002\024\013\000\002\026\011\000\002\026\014\000" +
    "\002\026\016\000\002\027\007\000\002\027\011\000\002" +
    "\027\002\000\002\030\004\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\006\000\002\030\005\000\002\031\005\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\010\002\ufffd\026\013\027\012\001\002\000" +
    "\010\002\ufffa\026\ufffa\027\ufffa\001\002\000\034\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\016\ufffc\017" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\047\ufffc\001\002" +
    "\000\004\002\237\001\002\000\010\002\uffff\026\013\027" +
    "\012\001\002\000\010\002\ufffe\026\013\027\012\001\002" +
    "\000\004\031\014\001\002\000\004\031\uffee\001\002\000" +
    "\004\031\uffef\001\002\000\012\020\026\022\023\024\ufff5" +
    "\047\ufff5\001\002\000\006\024\017\047\020\001\002\000" +
    "\006\024\ufff7\047\ufff7\001\002\000\004\031\021\001\002" +
    "\000\034\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\016\ufff8\017\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\047\ufff8\001\002\000\012\021\ufff5\022\023\024\ufff5\047" +
    "\ufff5\001\002\000\006\024\ufff6\047\ufff6\001\002\000\004" +
    "\032\024\001\002\000\004\023\025\001\002\000\010\021" +
    "\ufff4\024\ufff4\047\ufff4\001\002\000\010\021\027\026\013" +
    "\027\012\001\002\000\004\016\036\001\002\000\006\021" +
    "\034\024\033\001\002\000\004\031\021\001\002\000\006" +
    "\021\ufff1\024\ufff1\001\002\000\006\026\013\027\012\001" +
    "\002\000\004\016\036\001\002\000\010\002\ufff2\026\ufff2" +
    "\027\ufff2\001\002\000\032\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\011\uffea\016\uffea\017\uffea\026\013\027\012\030\uffea" +
    "\031\uffea\047\uffea\001\002\000\026\004\046\005\056\006" +
    "\065\007\053\011\051\016\036\017\227\030\047\031\054" +
    "\047\045\001\002\000\032\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\011\uffea\016\uffea\017\uffea\026\013\027\012\030\uffea" +
    "\031\uffea\047\uffea\001\002\000\004\031\021\001\002\000" +
    "\026\004\046\005\056\006\065\007\053\011\051\016\036" +
    "\017\044\030\047\031\054\047\045\001\002\000\034\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\016\ufffb" +
    "\017\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\047\ufffb\001" +
    "\002\000\044\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\016\uffec\017" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\047\uffec\001\002" +
    "\000\036\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\030\uffe1" +
    "\031\uffe1\047\uffe1\001\002\000\004\020\223\001\002\000" +
    "\016\020\100\031\075\032\076\033\074\040\077\047\220" +
    "\001\002\000\036\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\030\uffe5\031\uffe5\047\uffe5\001\002\000\004\020\175\001" +
    "\002\000\036\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\030" +
    "\uffe6\031\uffe6\047\uffe6\001\002\000\004\020\167\001\002" +
    "\000\010\015\151\020\137\022\150\001\002\000\036\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\017\uffe3\030\uffe3\031\uffe3\047" +
    "\uffe3\001\002\000\024\004\046\005\056\006\065\007\053" +
    "\011\051\016\036\030\047\031\054\047\045\001\002\000" +
    "\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\030\uffe8\031" +
    "\uffe8\047\uffe8\001\002\000\036\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\017\uffe9\030\uffe9\031\uffe9\047\uffe9\001\002\000\004" +
    "\047\160\001\002\000\036\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4" +
    "\017\uffe4\030\uffe4\031\uffe4\047\uffe4\001\002\000\036\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\016\uffe2\017\uffe2\030\uffe2\031\uffe2\047" +
    "\uffe2\001\002\000\004\047\157\001\002\000\004\020\070" +
    "\001\002\000\034\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\030\uffeb" +
    "\031\uffeb\047\uffeb\001\002\000\036\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\030\uffe7\031\uffe7\047\uffe7\001\002\000" +
    "\004\031\071\001\002\000\006\015\151\022\150\001\002" +
    "\000\004\047\073\001\002\000\014\020\100\031\075\032" +
    "\076\033\074\040\077\001\002\000\036\021\uffc0\023\uffc0" +
    "\024\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\001\002" +
    "\000\042\020\137\021\uffbf\022\136\023\uffbf\024\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\001\002\000\036\021" +
    "\uffc1\023\uffc1\024\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\001\002\000\014\020\100\031\075\032\076\033\074" +
    "\040\077\001\002\000\014\020\100\031\075\032\076\033" +
    "\074\040\077\001\002\000\036\021\uffc2\023\uffc2\024\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\001\002\000\030" +
    "\035\114\036\113\037\110\040\111\041\115\042\112\043" +
    "\104\044\103\045\107\046\106\047\105\001\002\000\014" +
    "\020\100\031\075\032\076\033\074\040\077\001\002\000" +
    "\014\020\100\031\075\032\076\033\074\040\077\001\002" +
    "\000\004\031\071\001\002\000\014\020\100\031\075\032" +
    "\076\033\074\040\077\001\002\000\014\020\100\031\075" +
    "\032\076\033\074\040\077\001\002\000\014\020\100\031" +
    "\075\032\076\033\074\040\077\001\002\000\014\020\100" +
    "\031\075\032\076\033\074\040\077\001\002\000\014\020" +
    "\100\031\075\032\076\033\074\040\077\001\002\000\014" +
    "\020\100\031\075\032\076\033\074\040\077\001\002\000" +
    "\014\020\100\031\075\032\076\033\074\040\077\001\002" +
    "\000\014\020\100\031\075\032\076\033\074\040\077\001" +
    "\002\000\036\021\uffc8\023\uffc8\024\uffc8\035\114\036\113" +
    "\037\110\040\111\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\001\002\000\036\021\uffca\023\uffca" +
    "\024\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\001\002" +
    "\000\036\021\uffc9\023\uffc9\024\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\001\002\000\036\021\uffc7\023\uffc7\024" +
    "\uffc7\035\114\036\113\037\110\040\111\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000" +
    "\036\021\uffcb\023\uffcb\024\uffcb\035\114\036\113\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\001\002\000\036\021\uffcc\023\uffcc\024\uffcc" +
    "\035\114\036\113\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000\036" +
    "\021\uffc4\023\uffc4\024\uffc4\035\114\036\113\037\110\040" +
    "\111\041\115\042\112\043\104\044\103\045\uffc4\046\uffc4" +
    "\047\uffc4\001\002\000\036\021\uffc3\023\uffc3\024\uffc3\035" +
    "\114\036\113\037\110\040\111\041\115\042\112\043\104" +
    "\044\103\045\uffc3\046\uffc3\047\uffc3\001\002\000\004\021" +
    "\127\001\002\000\024\004\046\005\056\006\065\007\053" +
    "\011\051\016\036\030\047\031\054\047\045\001\002\000" +
    "\036\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\030\uffd4\031" +
    "\uffd4\047\uffd4\001\002\000\036\021\uffc6\023\uffc6\024\uffc6" +
    "\035\114\036\113\037\110\040\111\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\001\002\000\036" +
    "\021\uffc5\023\uffc5\024\uffc5\035\114\036\113\037\110\040" +
    "\111\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\001\002\000\030\021\134\035\114\036\113\037" +
    "\110\040\111\041\115\042\112\043\104\044\103\045\107" +
    "\046\106\001\002\000\036\021\uffbd\023\uffbd\024\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000\036\021" +
    "\uffcd\023\uffcd\024\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\001\002\000\014\020\100\031\075\032\076\033\074" +
    "\040\077\001\002\000\016\020\100\021\141\031\075\032" +
    "\076\033\074\040\077\001\002\000\006\021\144\024\143" +
    "\001\002\000\036\021\uffdb\023\uffdb\024\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\001\002\000\032\021\uffbb\024" +
    "\uffbb\035\114\036\113\037\110\040\111\041\115\042\112" +
    "\043\104\044\103\045\107\046\106\001\002\000\014\020" +
    "\100\031\075\032\076\033\074\040\077\001\002\000\036" +
    "\021\uffdc\023\uffdc\024\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\001\002\000\032\021\uffbc\024\uffbc\035\114\036" +
    "\113\037\110\040\111\041\115\042\112\043\104\044\103" +
    "\045\107\046\106\001\002\000\030\023\147\035\114\036" +
    "\113\037\110\040\111\041\115\042\112\043\104\044\103" +
    "\045\107\046\106\001\002\000\036\021\uffbe\023\uffbe\024" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000" +
    "\014\020\100\031\075\032\076\033\074\040\077\001\002" +
    "\000\014\020\100\031\075\032\076\033\074\040\077\001" +
    "\002\000\032\021\uffdf\035\114\036\113\037\110\040\111" +
    "\041\115\042\112\043\104\044\103\045\107\046\106\047" +
    "\uffdf\001\002\000\030\023\154\035\114\036\113\037\110" +
    "\040\111\041\115\042\112\043\104\044\103\045\107\046" +
    "\106\001\002\000\004\015\155\001\002\000\014\020\100" +
    "\031\075\032\076\033\074\040\077\001\002\000\032\021" +
    "\uffde\035\114\036\113\037\110\040\111\041\115\042\112" +
    "\043\104\044\103\045\107\046\106\047\uffde\001\002\000" +
    "\036\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\030\uffdd\031" +
    "\uffdd\047\uffdd\001\002\000\036\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\017\uffe0\030\uffe0\031\uffe0\047\uffe0\001\002\000\004" +
    "\004\162\001\002\000\004\020\163\001\002\000\014\020" +
    "\100\031\075\032\076\033\074\040\077\001\002\000\030" +
    "\021\165\035\114\036\113\037\110\040\111\041\115\042" +
    "\112\043\104\044\103\045\107\046\106\001\002\000\004" +
    "\047\166\001\002\000\036\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\030\uffd5\031\uffd5\047\uffd5\001\002\000\014\020" +
    "\100\031\075\032\076\033\074\040\077\001\002\000\030" +
    "\021\171\035\114\036\113\037\110\040\111\041\115\042" +
    "\112\043\104\044\103\045\107\046\106\001\002\000\024" +
    "\004\046\005\056\006\065\007\053\011\051\016\036\030" +
    "\047\031\054\047\045\001\002\000\036\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\173\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\030\uffd8\031\uffd8\047\uffd8\001\002" +
    "\000\024\004\046\005\056\006\065\007\053\011\051\016" +
    "\036\030\047\031\054\047\045\001\002\000\036\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\016\uffd7\017\uffd7\030\uffd7\031\uffd7\047\uffd7" +
    "\001\002\000\004\031\021\001\002\000\004\021\177\001" +
    "\002\000\004\016\200\001\002\000\010\012\uffce\013\uffce" +
    "\017\uffce\001\002\000\010\012\204\013\202\017\203\001" +
    "\002\000\004\025\212\001\002\000\036\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\016\uffd3\017\uffd3\030\uffd3\031\uffd3\047\uffd3\001\002" +
    "\000\004\032\205\001\002\000\004\025\206\001\002\000" +
    "\034\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\016\uffea\017\uffea\030\uffea\031\uffea\047" +
    "\uffea\001\002\000\034\004\046\005\056\006\065\007\053" +
    "\011\051\012\uffd0\013\uffd0\014\210\016\036\017\uffd0\030" +
    "\047\031\054\047\045\001\002\000\004\047\211\001\002" +
    "\000\010\012\uffcf\013\uffcf\017\uffcf\001\002\000\030\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\011\uffea\014\uffea\016\uffea" +
    "\017\uffea\030\uffea\031\uffea\047\uffea\001\002\000\030\004" +
    "\046\005\056\006\065\007\053\011\051\014\215\016\036" +
    "\017\214\030\047\031\054\047\045\001\002\000\036\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\017\uffd2\030\uffd2\031\uffd2\047" +
    "\uffd2\001\002\000\004\047\216\001\002\000\004\017\217" +
    "\001\002\000\036\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1" +
    "\030\uffd1\031\uffd1\047\uffd1\001\002\000\036\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\016\uffda\017\uffda\030\uffda\031\uffda\047\uffda\001" +
    "\002\000\030\035\114\036\113\037\110\040\111\041\115" +
    "\042\112\043\104\044\103\045\107\046\106\047\222\001" +
    "\002\000\036\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\030" +
    "\uffd9\031\uffd9\047\uffd9\001\002\000\014\020\100\031\075" +
    "\032\076\033\074\040\077\001\002\000\030\021\225\035" +
    "\114\036\113\037\110\040\111\041\115\042\112\043\104" +
    "\044\103\045\107\046\106\001\002\000\024\004\046\005" +
    "\056\006\065\007\053\011\051\016\036\030\047\031\054" +
    "\047\045\001\002\000\036\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\017\uffd6\030\uffd6\031\uffd6\047\uffd6\001\002\000\044\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\016\uffed\017\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\047\uffed\001\002\000\004\031\021" +
    "\001\002\000\006\021\ufff0\024\ufff0\001\002\000\010\002" +
    "\ufff3\026\ufff3\027\ufff3\001\002\000\010\002\ufff9\026\ufff9" +
    "\027\ufff9\001\002\000\004\031\235\001\002\000\004\020" +
    "\026\001\002\000\010\002\000\026\013\027\012\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\016\002\005\003\006\004\007\005\004\010" +
    "\003\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\235\005\042\010\003\012" +
    "\010\001\001\000\006\010\232\012\233\001\001\000\006" +
    "\006\014\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\027\012\030\001\001\000" +
    "\004\013\231\001\001\000\002\001\001\000\004\007\031" +
    "\001\001\000\002\001\001\000\004\012\227\001\001\000" +
    "\004\013\034\001\001\000\002\001\001\000\012\003\037" +
    "\005\004\012\040\014\036\001\001\000\030\013\062\015" +
    "\065\016\057\017\060\020\056\021\063\022\066\023\051" +
    "\024\047\025\061\026\054\001\001\000\010\005\042\012" +
    "\040\014\041\001\001\000\006\006\014\007\015\001\001" +
    "\000\030\013\062\015\065\016\057\017\060\020\056\021" +
    "\063\022\066\023\051\024\047\025\061\026\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\100\030\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\013\062" +
    "\015\160\016\057\017\060\020\056\021\063\022\066\023" +
    "\051\024\047\025\061\026\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\100\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\100\030\134\001\001\000\006\021\100" +
    "\030\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\100\030\131\001\001\000\006\021\100\030\130" +
    "\001\001\000\004\017\125\001\001\000\006\021\100\030" +
    "\124\001\001\000\006\021\100\030\123\001\001\000\006" +
    "\021\100\030\122\001\001\000\006\021\100\030\121\001" +
    "\001\000\006\021\100\030\120\001\001\000\006\021\100" +
    "\030\117\001\001\000\006\021\100\030\116\001\001\000" +
    "\006\021\100\030\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\013\062\015\127\016\057\017" +
    "\060\020\056\021\063\022\066\023\051\024\047\025\061" +
    "\026\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\100\030\145\001\001\000\010\021" +
    "\100\030\141\031\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\100\030\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\100\030\152\001\001\000" +
    "\006\021\100\030\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\100\030\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\100\030" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\100\030\167\001\001\000\002\001" +
    "\001\000\030\013\062\015\171\016\057\017\060\020\056" +
    "\021\063\022\066\023\051\024\047\025\061\026\054\001" +
    "\001\000\002\001\001\000\030\013\062\015\173\016\057" +
    "\017\060\020\056\021\063\022\066\023\051\024\047\025" +
    "\061\026\054\001\001\000\002\001\001\000\004\007\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\206\001\001\000\030\013\062\015\065\016\057\017\060" +
    "\020\056\021\063\022\066\023\051\024\047\025\061\026" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\212\001\001\000\030\013\062\015\065\016\057\017" +
    "\060\020\056\021\063\022\066\023\051\024\047\025\061" +
    "\026\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\100\030\223\001" +
    "\001\000\002\001\001\000\030\013\062\015\225\016\057" +
    "\017\060\020\056\021\063\022\066\023\051\024\047\025" +
    "\061\026\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\232\012\233\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static String file;
        public static Scanner s;
        public static void main (String args[]) throws Exception{
        if(args.length == 0)
        {
            System.out.println("No File Input");
            System.exit(-1);
        }
        
        FileWriter fw = null;
        FileWriter fw2 = null;
        try{
            fw = new FileWriter("tree.txt");
            fw2 = new FileWriter("table.txt");
        }
        catch(IOException e){
            System.out.println("create file error");
        }

        Writer astwriter2 = new BufferedWriter(fw);
        Writer symWriter = new BufferedWriter(fw2);
        myPrint.setASTWriter(astwriter2);
        myPrint.setSYMWriter(symWriter);

        file = args[0];
        InputStream is = new FileInputStream(args[0]);
        Reader reader = new InputStreamReader(is);
        Scanner scanner = new Scanner(reader);
        Parser p = new Parser(scanner);
        p.parse();
        s = (Scanner)p.getScanner();

       

        try{
            astwriter2.close();
            symWriter.close();
        }
         catch(IOException e){
          System.out.println("close error");
         }
        ArrayList<String> serr = s.getErrors();
        if(serr.size()>0){
            for(String err : serr)
                System.out.println(args[0] + ": " + err);
            System.exit(-1);
        }
    }
    /* error line print function : override*/
    public void syntax_error(Symbol cur_token) {
        Scanner s = (Scanner) this.getScanner();
        System.out.println(file + ": " + s.yyline() + ":" + s.yycolumn()
     + ": error: parse error ");
        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arglist ::= expr 
            {
              ArgList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            ArgList al = new ArgList();
            RESULT = al.append(e);
            //System.out.println("ArgList := Expr");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arglist ::= arglist COMMA expr 
            {
              ArgList RESULT =null;
		int arglleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arglright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgList argl = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = argl.append(e);
            //System.out.println("ArgList := ArgList, Expr");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= LPR expr RPR 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = e;
            //System.out.println("Expr := (Expr)");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= ID LSQ expr RSQ 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new IDExpr(i, e, true);
                //System.out.println("Expr := ID:'"+i+"' [Expr]");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new IDExpr(i, null, false);
                //System.out.println("Expr := ID:'"+i+"'");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= FLOAT_N 
            {
              Expr RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new Num(k);
                //System.out.println("Expr := FLOAT("+k+")");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= INT_N 
            {
              Expr RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Num(k);
                //System.out.println("Expr := INT("+k+")");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= call 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new CallExpr(c);
                //System.out.println("Expr := Call");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr NEQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr != Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr == Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr GTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr >= Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr LTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr <= Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr > Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr <  Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr / Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr MUL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr * Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr SUB expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr - Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr ADD expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new BinOpExpr(l,op,r);
                //System.out.println("Expr := Expr + Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= SUB expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new UnOpExpr(m,e);
                //System.out.println("Expr := - Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // caselist ::= 
            {
              CaseList RESULT =null;
		RESULT = new CaseList();
            //System.out.println("CaseList :=");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caselist ::= caselist CASE INT_N COLON stmtlist BREAK SEMI 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int int_nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int int_nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String int_n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = cl.append(int_n, sl, true);
                //System.out.println("CaseList := CaseList case INT("+int_n+") : StmtList break;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caselist ::= caselist CASE INT_N COLON stmtlist 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int int_nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int int_nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String int_n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = cl.append(int_n, sl, false);
                //System.out.println("CaseList := CaseList case INT("+int_n+") : StmtList");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // switchstmt ::= SWITCH LPR ident RPR LBR caselist DEFAULT COLON stmtlist BREAK SEMI RBR 
            {
              SwitchStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ds = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new SwitchStmt(id, cl, ds, true);
            //System.out.println("SwitchStmt := switch (Identifier) { CaseList default : StmtList break ; }");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchstmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // switchstmt ::= SWITCH LPR ident RPR LBR caselist DEFAULT COLON stmtlist RBR 
            {
              SwitchStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ds = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new SwitchStmt(id, cl, ds, false);
            //System.out.println("SwitchStmt := switch (Identifier) { CaseList default : StmtList }");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchstmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // switchstmt ::= SWITCH LPR ident RPR LBR caselist RBR 
            {
              SwitchStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new SwitchStmt(id, cl, null, false);
                //System.out.println("SwitchStmt := switch (Identifier) {CaseList}");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchstmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forstmt ::= FOR LPR assign SEMI expr SEMI assign RPR stmt 
            {
              ForStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Assign init = (Assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Assign as = (Assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new ForStmt(init, cond, as, st);
                //System.out.println("ForStmt := for (Assign; Expr; Assign) Stmt");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // whilestmt ::= DO stmt WHILE LPR expr RPR SEMI 
            {
              WhileStmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
            RESULT =  new WhileStmt(e,st,true);
            //System.out.println("WhileStmt : = do Stmt while (Expr) ;");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // whilestmt ::= WHILE LPR expr RPR stmt 
            {
              WhileStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT =  new WhileStmt(e,st,false);
            //System.out.println("WhileStmt := while (Expr) Stmt ;");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifstmt ::= IF LPR expr RPR stmt ELSE stmt 
            {
              IfStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new IfStmt(cond,st1,st2);
                //System.out.println("IfStmt := if (Expr) Stmt else Stmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifstmt ::= IF LPR expr RPR stmt 
            {
              IfStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
                RESULT = new IfStmt(cond,st1, null);
                //System.out.println("IfStmt := if (Expr) Stmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // retstmt ::= RETURN expr SEMI 
            {
              RetStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new RetStmt(e);
                //System.out.println("RetStmt := return Expr;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // retstmt ::= RETURN SEMI 
            {
              RetStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = new RetStmt(null);
                //System.out.println("RetStmt := return;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // call ::= ID LPR RPR 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Call(id, null);
                //System.out.println("Call := ID:'" + id + "' ( )");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // call ::= ID LPR arglist RPR 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Call(id, al);
                //System.out.println("Call := ID:'" + id + "' ( ArgList )");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // callstmt ::= call SEMI 
            {
              CallStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CallStmt(c);
                //System.out.println("CallStmt := Call ;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callstmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign ::= ID LSQ expr RSQ ASSIGN expr 
            {
              Assign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr idx = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Assign(id, idx, e);
                //System.out.println("Assign := ID:'"+ id + "' [ Expr ] = Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign ::= ID ASSIGN expr 
            {
              Assign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Assign(id, null, e);
                //System.out.println("Assign := ID = Expr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignstmt ::= assign SEMI 
            {
              AssignStmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assign a = (Assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new AssignStmt(a);
                //System.out.println("AssignStmt := Assign;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= SEMI 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Semi(s);
                //System.out.println("Stmt := ;");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= compoundstmt 
            {
              Stmt RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStmt co = (CompStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = co;
                //System.out.println("Stmt := CallStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= switchstmt 
            {
              Stmt RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStmt sw = (SwitchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sw;
                //System.out.println("Stmt := SwithStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= ifstmt 
            {
              Stmt RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt ifs = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifs;
                //System.out.println("Stmt := ifStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= forstmt 
            {
              Stmt RESULT =null;
		int foleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int foright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStmt fo = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fo;
                //System.out.println("Stmt := ForStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= whilestmt 
            {
              Stmt RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStmt wh = (WhileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wh;
                //System.out.println("Stmt := WhileStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= retstmt 
            {
              Stmt RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetStmt re = (RetStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = re;
                //System.out.println("Stmt := RetStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= callstmt 
            {
              Stmt RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallStmt ca = (CallStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ca;
                //System.out.println("Stmt := CallStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= assignstmt 
            {
              Stmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignStmt as = (AssignStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = as;
                //System.out.println("Stmt := AssignStmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtlist ::= 
            {
              StmtList RESULT =null;
		
                RESULT = new StmtList();  
                 //System.out.println("StmtList := epsilon");
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtlist ::= stmtlist stmt 
            {
              StmtList RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList stl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = stl.append(s);
                //System.out.println("StmtList := StmtList Stmt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compoundstmt ::= LBR decllist stmtlist RBR 
            {
              CompStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList dl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CompStmt(dl,sl);
                //System.out.println("CompoundStmt := { DeclList StmtList}");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundstmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compoundstmt ::= LBR stmtlist RBR 
            {
              CompStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CompStmt(null, sl);
                //System.out.println("CompoundStmt := { StmtList }");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundstmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= FLOAT 
            {
              Type RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("Type := float");
            RESULT = new Type(1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT 
            {
              Type RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("Type := int");
            RESULT = new Type(0);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramlist ::= paramlist COMMA type ident 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            pl.append(t,id);
            RESULT = pl;
            //System.out.println("ParamList := ParamList , Type Ident");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramlist ::= type ident 
            {
              ParamList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //System.out.println("ParamList := Type Ident");
            ParamList pl = new ParamList(t,id);
            pl.append(t,id);
            RESULT = pl;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= type ID LPR paramlist RPR compoundstmt 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStmt cs = (CompStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Function(t,fn,pl,cs);
            //System.out.println("Function := Type ID:'"+fn+"' (ParamList) CompoundStmt");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= type ID LPR RPR compoundstmt 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompStmt cs = (CompStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = new Function(t,fn,null,cs);
            //System.out.println("Function := Type ID:'"+fn+"' ( ) CompoundStmt");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ident ::= ID LSQ INT_N RSQ 
            {
              Ident RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("Identifier := ID'"+id+"'["+k+"]");
            RESULT = new Ident(1, id, k);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident ::= ID 
            {
              Ident RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //System.out.println("Identifier := ID'"+id+"'");
            RESULT = new Ident(0,id, null);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identlist ::= identlist COMMA ident 
            {
              IdentList RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentList idl = (IdentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idl.append(id,1);
                //System.out.println("IdentList := IdentList, Identifier");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identlist ::= ident 
            {
              IdentList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("IdentList := Identifier");  
            IdentList il = new IdentList();
            RESULT = il.append(id,1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= type identlist SEMI 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentList il = (IdentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("Declaration := Type IdentList ;");
            RESULT =  new Decl(t,il);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funclist ::= funclist function 
            {
              FuncList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncList fl = (FuncList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.append(f);
                //System.out.println("FuncList := FuncList Function"); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funclist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funclist ::= function 
            {
              FuncList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("FuncList := Function"); 
            FuncList fl = new FuncList();
            RESULT = fl.append(f);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funclist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decllist ::= decllist decl 
            {
              DeclList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList dl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dl.append(d);
                //System.out.println("DeclList := Declaration");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decllist ::= decl 
            {
              DeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("DeclList := Declaration"); 
            DeclList dl = new DeclList();
            RESULT = dl.append(d);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Program RESULT =null;
		  
            //System.out.println("Program := epsilon"); 
            Program p = new Program (null, null);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= funclist 
            {
              Program RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncList fl = (FuncList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("Program := FuncList"); 
            Program p = new Program(null, fl);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decllist 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList dl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("Program := DeclList");
            Program p = new Program(dl,null);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decllist funclist 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList dl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncList fl = (FuncList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //System.out.println("Program := DeclList FuncList");
            Program p = new Program(dl,fl);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

